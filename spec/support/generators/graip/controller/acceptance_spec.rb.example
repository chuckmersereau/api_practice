require 'spec_helper'
require 'rspec_api_documentation/dsl'

resource 'Email Addresses' do
  include_context :json_headers

  # This is required!
  # This is the resource's JSONAPI.org `type` attribute to be validated against.
  let(:resource_type) { 'email_addresses' }

  # Remove this and the authorized context below if not authorizing your requests.
  let(:user) { create(:user_with_account) }

  # This is the reference data used to create/update a resource.
  # specify the `attributes` specifically in your request actions below.
  let(:form_data) { build_data(attributes) }

  # List your expected resource keys vertically here (alphabetical please!)
  let(:expected_attribute_keys) do
    %w(
      created_at
      updated_at
    )
  end

  # List out any additional attribute keys that will be alongside
  # the attributes of the resources.
  #
  # Remove if not needed.
  let(:additional_attribute_keys) do
    %w(
      relationships
    )
  end

  # This is the scope in how these endpoints will be organized in the
  # generated documentation.
  #
  # :entities should be used for "top level" resources, and the top level
  # resources should be used for nested resources.
  #
  # Ex: Api > v2 > Contacts                   - :entities would be the scope
  # Ex: Api > v2 > Contacts > Email Addresses - :contacts would be the scope
  let(:document) { raise 'FILL ME IN' }

  context 'authorized user' do
    before { api_login(user) }

    # index
    get '/my-index-url' do
      example 'Email Address [LIST]', document: document do
        explanation 'List of Email Addresses'
        do_request

        check_collection_resource(1, additional_attribute_keys)
        expect(resource_object.keys).to match_array expected_attribute_keys
        expect(response_status).to eq 200
      end
    end

    # show
    get '/my-show-url' do
      with_options scope: [:data, :attributes] do
        # list out the attributes here
        response_field 'name_of_attribute', 'Name of Attribute', 'Type' => 'The Attribute Type (String, Boolean, etc)'
      end

      example 'Email Address [GET]', document: document do
        explanation 'The Email Address for the given ID'
        do_request

        check_resource(additional_attribute_keys)
        expect(resource_object.keys).to match_array expected_attribute_keys
        expect(response_status).to eq 200
      end
    end

    # create
    post '/my-create-url' do
      with_options scope: [:data, :attributes] do
        # list out the POST params here
        parameter 'attribute_name', 'Description of the Attribute'
      end

      let(:attributes) { 'FILL ME IN WITH POST DATA' }

      example 'Email Address [CREATE]', document: document do
        explanation 'Create Email Address'
        do_request data: form_data

        check_resource(additional_attribute_keys)
        expect(resource_object.keys).to match_array expected_attribute_keys
        expect(response_status).to eq 201
      end
    end

    # update
    put '/my-update-url' do
      with_options scope: [:data, :attributes] do
        # list out the PUT params here
        parameter 'attribute_name', 'Description of the Attribute'
      end

      let(:attributes) { 'FILL ME IN WITH PUT DATA' }

      example 'Email Address [UPDATE]', document: document do
        explanation 'Update Email Address'
        do_request data: form_data

        check_resource(additional_attribute_keys)
        expect(resource_object.keys).to match_array expected_attribute_keys
        expect(response_status).to eq 200
      end
    end

    # update
    patch '/my-update-url' do
      with_options scope: [:data, :attributes] do
        # list out the PATCH params here
        parameter 'attribute_name', 'Description of the Attribute'
      end

      let(:attributes) { 'FILL ME IN WITH PATCH DATA' }

      example 'Email Address [UPDATE]', document: document do
        explanation 'Update Email Address'
        do_request data: form_data

        check_resource(additional_attribute_keys)
        expect(resource_object.keys).to match_array expected_attribute_keys
        expect(response_status).to eq 200
      end
    end

    # destroy
    delete '/my-destroy-url' do
      example 'Email Address [DELETE]', document: document do
        explanation 'Delete Email Address'
        do_request

        expect(response_status).to eq 204
      end
    end
  end
end
