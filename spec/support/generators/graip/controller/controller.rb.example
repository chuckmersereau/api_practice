class Api::V2::EmailAddressesController < Api::V2::ApplicationController
  def index
    load_email_addresses
    # make sure to authorize when needed

    render json: @email_addresses, meta: meta_hash(@email_addresses), include: include_params, fields: field_params
  end

  def show
    load_email_address
    authorize_email_address

    render_email_address
  end

  def create
    persist_email_address
  end

  def update
    load_email_address
    authorize_email_address

    persist_email_address
  end

  def destroy
    load_email_address
    authorize_email_address
    destroy_email_address
  end

  private

  def email_address_params
    params
      .require(:data)
      .require(:attributes)
      .permit(email_address_attributes)
  end

  def email_address_attributes
    EmailAddress::PERMITTED_ATTRIBUTES
  end

  def email_address_scope
    # This is just a placeholder to remind you to properly scope the model
    # ie: It's meant to blow up :)
    EmailAddress.that_belong_to(current_user)
  end

  def authorize_email_address
    authorize @email_address
  end

  def build_email_address
    @email_address ||= email_address_scope.build
    @email_address.assign_attributes(email_address_params)
  end

  def destroy_email_address
    @email_address.destroy
    head :no_content
  end

  def load_email_address
    @email_address ||= EmailAddress.find_by!(uuid: params[:id])
  end

  def load_email_addresses
    @email_addresses ||= email_address_scope
      .where(filter_params)
      .reorder(sorting_param)
      .page(page_number_param)
      .per(per_page_param)
  end

  def permitted_filters
    # These are the keys of the filters that are permitted to be used in
    # scoping the resources returned in `#index`.
    #
    # This method _must_ be defined, with the very least returning an empty array

    []
  end

  def persist_email_address
    build_email_address
    authorize_email_address

    if save_email_address
      render_email_address
    else
      render_400_with_errors(@email_address)
    end
  end

  def render_email_address
    render json: @email_address,
           status: success_status,
           include: include_params,
           fields: field_params
  end

  def save_email_address
    @email_address.save(context: persistence_context)
  end
end
