require 'spec_helper'
require 'rspec_api_documentation/dsl'

resource '<%= resource_class_name.pluralize.titleize %>' do
  include_context :json_headers

  # This is required!
  # This is the resource's JSONAPI.org `type` attribute to be validated against.
  let(:resource_type) { '<%= underscored_resources_name %>' }

  # Remove this and the authorized context below if not authorizing your requests.
  let(:user) { create(:user_with_account) }

  # This is the reference data used to create/update a resource.
  # specify the `attributes` specifically in your request actions below.
  let(:form_data) { build_data(attributes) }

  let(:expected_attribute_keys) do
    # list your expected resource keys vertically here (alphabetical please!)
    %w(
      created_at
      updated_at
    )
  end

  context 'authorized user' do
    before { api_login(user) }

    # index
    get '/my-index-url' do
      example_request '<%= resource_human_name.titleize %> [LIST]' do
        check_collection_resource(1)
        expect(resource_object.keys).to match_array expected_attribute_keys
        expect(response_status).to eq 200
      end
    end

    # show
    get '/my-show-url' do
      with_options scope: [:data, :attributes] do
        # list out the attributes here
        response_field 'name_of_attribute', 'Name of Attribute', 'Type' => 'The Attribute Type (String, Boolean, etc)'
      end

      example_request '<%= resource_human_name.titleize %> [GET]' do
        check_resource
        expect(resource_object.keys).to match_array expected_attribute_keys
        expect(response_status).to eq 200
      end
    end

    # create
    post '/my-create-url' do
      with_options scope: [:data, :attributes] do
        # list out the POST params here
        parameter 'attribute_name', 'Description of the Attribute'
      end

      let(:attributes) { "FILL ME IN WITH POST DATA" }

      example '<%= resource_human_name.titleize %> [CREATE]' do
        do_request data: form_data

        check_resource
        expect(resource_object.keys).to match_array expected_attribute_keys
        expect(response_status).to eq 201
      end
    end

    # update
    put '/my-update-url' do
      with_options scope: [:data, :attributes] do
        # list out the PUT params here
        parameter 'attribute_name', 'Description of the Attribute'
      end

      let(:attributes) { "FILL ME IN WITH PUT DATA" }

      example '<%= resource_human_name.titleize %> [UPDATE]' do
        do_request data: form_data

        check_resource
        expect(resource_object.keys).to match_array expected_attribute_keys
        expect(response_status).to eq 200
      end
    end

    # update
    patch '/my-update-url' do
      with_options scope: [:data, :attributes] do
        # list out the PATCH params here
        parameter 'attribute_name', 'Description of the Attribute'
      end

      let(:attributes) { "FILL ME IN WITH PATCH DATA" }

      example '<%= resource_human_name.titleize %> [UPDATE]' do
        do_request data: form_data

        check_resource
        expect(resource_object.keys).to match_array expected_attribute_keys
        expect(response_status).to eq 200
      end
    end

    # destroy
    delete '/my-destroy-url' do
      example_request '<%= resource_human_name.titleize %> [DELETE]' do
        expect(response_status).to eq 204
      end
    end
  end
end
